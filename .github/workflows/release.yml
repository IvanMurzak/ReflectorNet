name: Release

on:
  push:
    branches: [ "main" ]

jobs:
  check-version-tag:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.current-version }}
      prev_tag: ${{ steps.prev_tag.outputs.tag }}
      is_new_tag: ${{ !steps.tag_exists.outputs.exists }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-tags: true

      - name: Get version from ReflectorNet.csproj
        id: get_version
        shell: bash
        run: |
          version=$(grep -oP '<Version>\K[^<]+' ReflectorNet/ReflectorNet.csproj)
          echo "current-version=$version" >> $GITHUB_OUTPUT
          echo "Found version: $version"

      - name: Find previous version tag
        id: prev_tag
        uses: WyriHaximus/github-action-get-previous-tag@v1

      - name: Check if tag exists
        id: tag_exists
        uses: mukunku/tag-exists-action@v1.6.0
        with:
          tag: ${{ steps.get_version.outputs.current-version }}

  build-and-test:
    runs-on: ${{ matrix.os }}
    needs: check-version-tag
    if: needs.check-version-tag.outputs.is_new_tag == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest]
        dotnet-version: [ '9.0.x' ]
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore --configuration Release
    - name: Test
      run: dotnet test --no-build --verbosity normal --configuration Release

  modify-release:
    runs-on: ubuntu-latest
    needs: [check-version-tag, build-and-test]
    if: needs.check-version-tag.outputs.is_new_tag == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Generate release description
        id: rel_desc
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -e
          version=${{ needs.check-version-tag.outputs.version }}
          prev_tag=${{ needs.check-version-tag.outputs.prev_tag }}
          repo_url="https://github.com/${GITHUB_REPOSITORY}"
          today=$(date +'%B %e, %Y')

          echo "repo_url: $repo_url"
          echo "today: $today"

          echo "# ReflectorNet Version $version" > release.md
          echo "**Released:** *$today*" >> release.md

          echo "" >> release.md
          echo "---" >> release.md
          echo "" >> release.md

          if [ -n "$prev_tag" ]; then
            echo "## Comparison" >> release.md
            echo "See every change: [Compare $prev_tag...$version]($repo_url/compare/$prev_tag...$version)" >> release.md

            echo "" >> release.md
            echo "---" >> release.md
            echo "" >> release.md
          fi

          echo "## Commit Summary (Newest → Oldest)" >> release.md
          for sha in $(git log --pretty=format:'%H' $prev_tag..HEAD); do
            username=$(gh api repos/${GITHUB_REPOSITORY}/commits/$sha --jq '.author.login // .commit.author.name')
            message=$(git log -1 --pretty=format:'%s' $sha)
            short_sha=$(git log -1 --pretty=format:'%h' $sha)
            echo "- [\`$short_sha\`]($repo_url/commit/$sha) — $message by @$username" >> release.md
          done
          printf "release_body<<ENDOFRELEASEBODY\n%s\nENDOFRELEASEBODY\n" "$(cat release.md)" >> $GITHUB_ENV
          echo "success=true" >> $GITHUB_OUTPUT

  deploy:
    needs: [build-and-test, check-version-tag]
    runs-on: ubuntu-latest
    if: needs.check-version-tag.outputs.is_new_tag == 'true'
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore --configuration Release
    - name: Pack
      run: dotnet pack ReflectorNet/ReflectorNet.csproj --no-build --configuration Release --output ./packages
    - name: Publish to NuGet
      run: dotnet nuget push ./packages/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
